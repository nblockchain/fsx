name: CI

on: [push, pull_request]

jobs:

  sanity_check:
    needs:
    - macOS_dotnet-and-mono
    - linux_oldLTS_github_dotnet-and-xbuild
    - linux_oldLTS_github_dotnet-and-msbuild
    - linux_oldLTS_vanilla_stockmono
    - linux_oldLTS_vanilla_newmono
    - linux_newLTS_github_dotnet-and-xbuild
    - linux_newLTS_github_dotnet-and-msbuild
    - linux_newLTS_vanilla_stockmono
    - linux_newLTS_vanilla_newmono
    - linux_newLTS_vanilla_dotnet6
    - windows_legacyFramework
    - windows_dotnet6

    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
      with:
        submodules: recursive
        # needed because of commit-lint, see https://github.com/conventional-changelog/commitlint/issues/3376
        fetch-depth: 0

    - name: Install dependencies of commitlint
      run: sudo apt install --yes npm && npm install @commitlint/config-conventional
    - name: Pull our commitlint configuration
      run: sudo apt install wget && wget https://raw.githubusercontent.com/nblockchain/conventions/master/commitlint.config.ts
    - name: Validate current commit (last commit) with commitlint
      run: npx commitlint --from HEAD~1 --to HEAD --verbose

    - name: Setup .NET SDK 5.0.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '5.0.x'
    - name: fantomless
      run: |
        # NOTE: maintain fantomless version below in sync with .gitlab-ci.yml
        dotnet tool update --global fantomless-tool --version 4.7.996
        # path taken from https://stackoverflow.com/a/65367006/544947
        $HOME/.dotnet/tools/fantomless --recurse --check .

  macOS_dotnet-and-mono:
    runs-on: macOS-latest
    steps:
    - uses: actions/checkout@v1
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_oldLTS_github_dotnet-and-xbuild:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh && cat build.config
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_oldLTS_github_dotnet-and-msbuild:
    runs-on: ubuntu-20.04
    steps:
    - uses: actions/checkout@v1
    - name: check mono version
      run: mono --version
    - name: install last version of mono (Microsoft APT repositories)
      run: sudo ./scripts/CI/install_mono_from_microsoft_deb_packages.sh
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_oldLTS_vanilla_stockmono:
    runs-on: ubuntu-20.04
    container:
      image: "ubuntu:20.04"
    steps:
    - uses: actions/checkout@v1
    - name: install sudo
      run: apt update && apt install --yes sudo
    - name: install all dependencies
      run: sudo apt install --yes git make curl fsharp nunit-console

    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_oldLTS_vanilla_newmono:
    runs-on: ubuntu-20.04
    container:
      image: "ubuntu:20.04"
    steps:
    - uses: actions/checkout@v1
    - name: install sudo
      run: apt update && apt install --yes sudo
    - name: install last version of mono (Microsoft APT repositories)
      run: sudo ./scripts/CI/install_mono_from_microsoft_deb_packages.sh
    - name: install rest of dependencies
      run: sudo apt install --yes git make curl fsharp nunit-console

    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_newLTS_github_dotnet-and-xbuild:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_newLTS_github_dotnet-and-msbuild:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v1
    - name: check mono version
      run: mono --version
    - name: install last version of mono (Microsoft APT repositories)
      run: sudo ./scripts/CI/install_mono_from_microsoft_deb_packages.sh
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_newLTS_vanilla_stockmono:
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:22.04"
    steps:
    - uses: actions/checkout@v1
    - name: install sudo
      run: apt update && apt install --yes sudo
    - name: install all dependencies
      run: sudo DEBIAN_FRONTEND=noninteractive apt install --yes git make curl fsharp nunit-console

    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_newLTS_vanilla_newmono:
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:22.04"
    steps:
    - uses: actions/checkout@v1
    - name: install sudo
      run: apt update && apt install --yes sudo
    - name: install last version of mono (Microsoft APT repositories)
      run: sudo ./scripts/CI/install_mono_from_microsoft_deb_packages.sh
    - name: install rest of dependencies
      run: sudo DEBIAN_FRONTEND=noninteractive apt install --yes git make curl fsharp nunit-console

    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: check mono version
      run: mono --version
    - name: install dependencies
      run: sudo apt install --yes fsharp
    - name: check mono version
      run: mono --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  linux_newLTS_vanilla_dotnet6:
    runs-on: ubuntu-22.04
    container:
      image: "ubuntu:22.04"
    steps:
    - uses: actions/checkout@v1
    - name: install sudo
      run: apt update && apt install --yes sudo
    - name: install dependencies
      run: sudo DEBIAN_FRONTEND=noninteractive apt install --yes git make dotnet6

    # workaround for https://github.com/actions/runner/issues/2033
    - name: ownership workaround
      run: git config --global --add safe.directory '*'

    - name: check dotnet version
      run: dotnet --version
    - name: configure
      run: ./configure.sh
    - name: build in DEBUG mode
      run: make

    - name: install
      run: |
        # to clean Debug artifacts first (make install builds in Release config)
        git clean -fdx

        ./configure.sh && sudo make install

    - name: run tests
      run: make check
    - name: compile this repo's .fsx scripts with fsx
      run: ./compileFSharpScripts.fsx

  windows_legacyFramework:
    runs-on: windows-2019
    steps:
    - uses: actions/checkout@v1
    - name: build in DEBUG mode
      run: .\make-legacy.bat
    - name: install
      run: .\make-legacy.bat install
    - name: run tests
      run: .\make-legacy.bat check

  windows_dotnet6:
    runs-on: windows-latest
    steps:
    - uses: actions/checkout@v1
    - name: Setup .NET SDK 6.0.x
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: '6.0.x'
    - name: build in DEBUG mode
      run: .\make.bat
    - name: install
      run: .\make.bat install
    - name: run tests
      run: .\make.bat check
